{
  "index": {
    "meta": {
      "title": "NooblyJS Core - Modular Node.js Backend Services Framework",
      "description": "A comprehensive suite of 13+ modular backend services for building scalable Node.js applications with ease"
    },
    "hero": {
      "title": "NooblyJS Core",
      "subtitle": "Enterprise-Grade Modular Node.js Backend Services - Build Scalable Applications with 13+ Integrated Services",
      "image": {
        "src": "robot-hero-main.jpg",
        "alt": "NooblyJS Core - Modular Backend Services Framework"
      },
      "buttons": [
        {
          "text": "Get Started",
          "href": "documentation.html",
          "type": "primary"
        },
        {
          "text": "View on GitHub",
          "href": "https://github.com/nooblyjs/nooblyjs-core",
          "type": "outline"
        }
      ]
    },
    "features": [
      {
        "icon": "<i class=\"bi bi-puzzle-fill\"></i>",
        "title": "13+ Modular Services",
        "description": "Complete backend toolkit with pluggable services for caching, data storage, file management, authentication, and more. Mix and match exactly what you need."
      },
      {
        "icon": "<i class=\"bi bi-diagram-3\"></i>",
        "title": "Smart Dependency Injection",
        "description": "Automatic service initialization with intelligent dependency resolution across 4 hierarchy levels. Focus on building, not on orchestration."
      },
      {
        "icon": "<i class=\"bi bi-shield-lock\"></i>",
        "title": "Enterprise Security",
        "description": "Built-in API key authentication, OAuth 2.0 integration, role-based access control, and bcrypt password security out of the box."
      }
    ],
    "stats": [
      {
        "number": "13",
        "label": "Core Services"
      },
      {
        "number": "25+",
        "label": "Provider Options"
      },
      {
        "number": "4",
        "label": "Dependency Levels"
      },
      {
        "number": "REST API",
        "label": "Auto-Generated"
      }
    ],
    "services": {
      "title": "15 Core Services",
      "description": "Complete backend toolkit with integrated services across all layers of application architecture",
      "items": [
        {
          "badge": "üìù Foundation",
          "badgeType": "default",
          "title": "Logging Service",
          "href": "/services/logging",
          "description": "Multi-level structured logging with console, file, and API providers for comprehensive application monitoring."
        },
        {
          "badge": "‚ö° Performance",
          "badgeType": "default",
          "title": "Caching Service",
          "href": "/services/caching",
          "description": "High-performance distributed caching with Redis, Memcached, in-memory, and file providers. Built-in analytics and LRU eviction."
        },
        {
          "badge": "<i class=\"bi bi-folder-fill\"></i> Files",
          "badgeType": "outline",
          "title": "Filing Service",
          "href": "/services/filing",
          "description": "Flexible file management with local, S3, FTP, GCP, and Git providers. Full-featured file operations and metadata handling."
        },
        {
          "badge": "‚è≥ Processing",
          "badgeType": "default",
          "title": "Queueing Service",
          "href": "/services/queueing",
          "description": "FIFO task queuing for background operations with in-memory and API providers. Monitor queue size and async task handling."
        },
        {
          "badge": "<i class=\"bi bi-globe\"></i> Network",
          "badgeType": "default",
          "title": "Fetching Service",
          "href": "/services/fetching",
          "description": "HTTP fetching with advanced caching, deduplication, and analytics. Supports Node.js native fetch and Axios providers with NextJS fetch specification compliance."
        },
        {
          "badge": "<i class=\"bi bi-database\"></i> Storage",
          "badgeType": "secondary",
          "title": "Data Service",
          "href": "/services/dataservice",
          "description": "Persistent data storage with MongoDB, SimpleDB, file-based, and memory providers. Complete CRUD operations and query support."
        },
        {
          "badge": "üîß Workers",
          "badgeType": "default",
          "title": "Working Service",
          "href": "/services/working",
          "description": "Background task execution engine with worker management and lifecycle control for intensive asynchronous operations."
        },
        {
          "badge": "<i class=\"bi bi-graph-up\"></i> Analytics",
          "badgeType": "secondary",
          "title": "Measuring Service",
          "href": "/services/measuring",
          "description": "Real-time metrics collection with time-series data, aggregation functions, and date range queries for performance analysis."
        },
        {
          "badge": "‚è∞ Automation",
          "badgeType": "secondary",
          "title": "Scheduling Service",
          "href": "/services/scheduling",
          "description": "Cron-like recurring tasks and delayed execution with callback handling for automated process orchestration."
        },
        {
          "badge": "<i class=\"bi bi-search\"></i> Discovery",
          "badgeType": "outline",
          "title": "Searching Service",
          "href": "/services/searching",
          "description": "Full-text search with in-memory indexing and powerful query capabilities. Fast data retrieval and intelligent filtering."
        },
        {
          "badge": "<i class=\"bi bi-arrow-repeat\"></i> Workflows",
          "badgeType": "default",
          "title": "Workflow Service",
          "href": "/services/workflow",
          "description": "Step-based workflow orchestration with worker threads, parallel execution, and comprehensive error handling for complex business logic."
        },
        {
          "badge": "<i class='bi bi-bell-fill'></i> Messaging",
          "badgeType": "secondary",
          "title": "Notifying Service",
          "href": "/services/notifying",
          "description": "Pub/sub messaging system with topic-based communication and multiple subscribers for real-time event broadcasting."
        },
        {
          "badge": "<i class=\"bi bi-lock-fill\"></i> Security",
          "badgeType": "default",
          "title": "Authentication Service",
          "href": "/services/authservice",
          "description": "Complete auth system with OAuth 2.0, Passport.js, session management, RBAC, and bcrypt password security."
        },
        {
          "badge": "<i class=\"bi bi-robot\"></i> AI",
          "badgeType": "outline",
          "title": "AI Service",
          "href": "/services/aiservice",
          "description": "LLM integration with Claude, ChatGPT, and Ollama. Prompt management, streaming responses, and AI-powered analytics."
        },
        {
          "badge": "<i class=\"bi bi-diagram-3\"></i> Structure",
          "badgeType": "secondary",
          "title": "App Service",
          "href": "/services/appservice",
          "description": "Application scaffolding and structure management. Auto-loads views, routes, services, and data structures. Provides base classes for rapid development."
        }
      ]
    },
    "testimonial": {
      "text": "NooblyJS Core's modular architecture and dependency injection have completely transformed how we build backend services. What used to require extensive boilerplate now takes minutes. The 15 integrated services with multiple provider options give us the flexibility we need without the complexity.",
      "author": "‚Äî Enterprise Developer"
    },
    "footer": {
      "about": {
        "title": "About NooblyJS Core",
        "description": "A comprehensive modular Node.js backend framework providing 15 integrated services with automatic dependency injection, singleton pattern implementation, and pluggable providers for every layer of application architecture.",
        "techStack": ["Node.js", "Express", "ServiceRegistry Pattern", "Dependency Injection", "Redis", "MongoDB", "AWS S3", "HTTP Fetching", "App Scaffolding"]
      },
      "quickLinks": [
        { "text": "Home", "href": "index.html" },
        { "text": "Documentation", "href": "documentation.html" },
        { "text": "Contact", "href": "contact.html" },
        { "text": "API Reference", "href": "#" },
        { "text": "Examples", "href": "#" },
        { "text": "GitHub", "href": "#" }
      ],
      "resources": [
        { "text": "Getting Started", "href": "#" },
        { "text": "Tutorials", "href": "#" },
        { "text": "Community", "href": "#" },
        { "text": "Blog", "href": "#" },
        { "text": "Changelog", "href": "#" },
        { "text": "Support", "href": "#" }
      ],
      "newsletter": {
        "title": "Stay Updated",
        "description": "Subscribe to our newsletter for the latest updates and features.",
        "placeholder": "Enter your email"
      },
      "copyright": "¬© 2024 Noobly JS. All rights reserved.",
      "legalLinks": [
        { "text": "Privacy Policy", "href": "#" },
        { "text": "Terms of Service", "href": "#" },
        { "text": "License", "href": "#" }
      ]
    }
  },
  "documentation": {
    "meta": {
      "title": "Documentation - Noobly JS",
      "description": "Comprehensive documentation and guides for getting started with Noobly JS framework and all its services."
    },
    "hero": {
      "badge": "üìö Documentation",
      "title": "Documentation",
      "description": "Comprehensive documentation and guides for getting started with Noobly JS framework and all its services.",
      "buttons": [
        {
          "text": "Quick Start",
          "href": "#quick-start",
          "type": "primary"
        },
        {
          "text": "API Reference",
          "href": "#api-reference",
          "type": "outline"
        }
      ]
    },
    "quickStart": {
      "title": "Quick Start Guide",
      "description": "Get up and running with NooblyJS Core in minutes",
      "steps": [
        {
          "title": "1. Installation",
          "description": "Install NooblyJS Core using npm:",
          "code": "npm install noobly-core"
        },
        {
          "title": "2. Initialize & Get Services",
          "description": "Create your Express app and initialize the service registry:",
          "code": "const express = require('express');\nconst serviceRegistry = require('noobly-core');\n\nconst app = express();\napp.use(express.json());\n\n// Initialize registry FIRST\nserviceRegistry.initialize(app);\n\n// Get services\nconst cache = serviceRegistry.cache('memory');\nconst logger = serviceRegistry.logger('file');"
        },
        {
          "title": "3. Use Services in Routes",
          "description": "Start using services in your application logic:",
          "code": "app.get('/api/user/:id', async (req, res) => {\n  const cacheKey = `user:${req.params.id}`;\n  let user = await cache.get(cacheKey);\n  \n  if (!user) {\n    user = await db.getUser(req.params.id);\n    await cache.set(cacheKey, user, 3600);\n  }\n  \n  logger.info(`User retrieved: ${req.params.id}`);\n  res.json(user);\n});\n\napp.listen(3000);"
        }
      ]
    },
    "services": {
      "title": "Available Services",
      "description": "Explore our comprehensive service ecosystem",
      "items": [
        {
          "badge": "‚ö° Performance",
          "badgeType": "default",
          "title": "Caching Service",
          "href": "/services",
          "description": "High-performance distributed caching with Redis, Memcached, and in-memory providers.",
          "code": "const cache = serviceRegistry.cache('memory');\nawait cache.set('key', 'value');\nconst value = await cache.get('key');"
        },
        {
          "badge": "<i class=\"bi bi-database\"></i> Storage",
          "badgeType": "secondary",
          "title": "Data Service",
          "href": "data.html",
          "description": "Persistent data storage with MongoDB, SimpleDB, and file-based providers.",
          "code": "const dataService = serviceRegistry.dataService('file');\nawait dataService.store('user:1', userData);\nconst user = await dataService.retrieve('user:1');"
        },
        {
          "badge": "üìù Monitoring",
          "badgeType": "outline",
          "title": "Logging Service",
          "href": "logging.html",
          "description": "Multi-level structured logging with console and file outputs.",
          "code": "const logger = serviceRegistry.logger('file');\nlogger.info('Application started');\nlogger.error('An error occurred', error);"
        },
        {
          "badge": "üìä Analytics",
          "badgeType": "default",
          "title": "Measuring Service",
          "href": "measuring.html",
          "description": "Real-time metrics collection and time-series analysis.",
          "code": "const metrics = serviceRegistry.measuring('memory');\nmetrics.increment('api_calls');\nconst count = await metrics.aggregate('api_calls', 'sum');"
        },
        {
          "badge": "<i class='bi bi-bell-fill'></i> Messaging",
          "badgeType": "secondary",
          "title": "Notifying Service",
          "href": "notifying.html",
          "description": "Pub/sub messaging system with topic-based communication.",
          "code": "const notify = serviceRegistry.notifying('memory');\nnotify.subscribe('channel', (message) => console.log(message));\nnotify.publish('channel', { event: 'user_created' });"
        },
        {
          "badge": "‚è≥ Processing",
          "badgeType": "outline",
          "title": "Queueing Service",
          "href": "queueing.html",
          "description": "FIFO task queueing for background job processing.",
          "code": "const queue = serviceRegistry.queue('memory');\nqueue.add('email_task', { to: 'user@example.com' });\nconst task = await queue.process();"
        },
        {
          "badge": "<i class=\"bi bi-globe\"></i> Network",
          "badgeType": "default",
          "title": "Fetching Service",
          "href": "fetching.html",
          "description": "HTTP fetching with caching, deduplication, and analytics. Supports Node.js native fetch and Axios providers.",
          "code": "const fetching = serviceRegistry.fetching('node');\nconst response = await fetching.fetch('https://api.example.com/data');\nconst analytics = fetching.getAnalytics();"
        },
        {
          "badge": "<i class=\"bi bi-diagram-3\"></i> Structure",
          "badgeType": "secondary",
          "title": "App Service",
          "href": "appservice.html",
          "description": "Application scaffolding with auto-loading of views, routes, services, and data structures.",
          "code": "const appService = serviceRegistry.appservice('basic', options);\n// Auto-loads from src/views/, src/routes/, src/services/, src/data/"
        }
      ]
    },
    "apiReference": {
      "title": "API Reference",
      "description": "Complete API documentation for all 15 services and core framework",
      "coreFramework": {
        "title": "Service Registry Core Methods",
        "code": "const serviceRegistry = require('noobly-core');\n\n// Initialize the service registry (REQUIRED - must be first)\nserviceRegistry.initialize(app, eventEmitter, options);\n\n// Get service instances by method name\nconst cache = serviceRegistry.cache(provider, options);\nconst logger = serviceRegistry.logger(provider, options);\nconst dataService = serviceRegistry.dataService(provider, options);\nconst auth = serviceRegistry.authservice(provider, options);\nconst queue = serviceRegistry.queue(provider, options);\nconst notify = serviceRegistry.notifying(provider, options);\n\n// All services auto-register Express routes at /services/{service}/api/*\n// Access service management UI at /services/ (requires authentication)"
      },
      "sections": [
        {
          "title": "Configuration",
          "description": "Service configuration options and examples.",
          "href": "#"
        },
        {
          "title": "Examples",
          "description": "Real-world usage examples and tutorials.",
          "href": "#"
        },
        {
          "title": "Best Practices",
          "description": "Recommended patterns and best practices.",
          "href": "#"
        }
      ]
    },
    "footer": {
      "about": {
        "title": "Documentation",
        "description": "Comprehensive guides and API reference for building applications with Noobly JS framework."
      },
      "quickLinks": [
        { "text": "Home", "href": "index.html" },
        { "text": "Documentation", "href": "documentation.html" },
        { "text": "Contact", "href": "contact.html" },
        { "text": "Services", "href": "/services" }
      ],
      "resources": [
        { "text": "Quick Start", "href": "#quick-start" },
        { "text": "API Reference", "href": "#api-reference" },
        { "text": "Examples", "href": "#" },
        { "text": "Best Practices", "href": "#" }
      ]
    }
  },
  "contact": {
    "meta": {
      "title": "Contact - NooblyJS Core",
      "description": "Have questions about NooblyJS Core? Need integration help or want to contribute? We'd love to hear from you."
    },
    "hero": {
      "badge": "üí¨ Contact",
      "title": "Get in Touch",
      "description": "Have questions about NooblyJS Core? Need integration help or want to contribute? We'd love to hear from you."
    },
    "contactMethods": [
      {
        "icon": "<i class=\"bi bi-envelope-fill\"></i>",
        "title": "Email Support",
        "description": "Get help with technical questions and support issues",
        "button": {
          "text": "support@nooblyjs.com",
          "href": "mailto:support@nooblyjs.com",
          "type": "outline"
        }
      },
      {
        "icon": "<i class=\"bi bi-github\"></i>",
        "title": "GitHub",
        "description": "Report bugs, request features, or contribute to the project",
        "button": {
          "text": "View Repository",
          "href": "#",
          "type": "outline"
        }
      },
      {
        "icon": "<i class=\"bi bi-discord\"></i>",
        "title": "Community",
        "description": "Join our Discord server for real-time discussions",
        "button": {
          "text": "Join Discord",
          "href": "#",
          "type": "outline"
        }
      }
    ],
    "contactForm": {
      "title": "Send us a Message",
      "description": "We'll get back to you as soon as possible",
      "fields": [
        {
          "id": "contactName",
          "type": "text",
          "label": "Name",
          "placeholder": "Your full name",
          "required": true
        },
        {
          "id": "contactEmail",
          "type": "email",
          "label": "Email",
          "placeholder": "your.email@example.com",
          "required": true
        },
        {
          "id": "contactSubject",
          "type": "select",
          "label": "Subject",
          "required": true,
          "options": [
            { "value": "", "text": "Select a topic" },
            { "value": "general", "text": "General Question" },
            { "value": "technical", "text": "Technical Support" },
            { "value": "feature", "text": "Feature Request" },
            { "value": "bug", "text": "Bug Report" },
            { "value": "business", "text": "Business Inquiry" }
          ]
        },
        {
          "id": "contactMessage",
          "type": "textarea",
          "label": "Message",
          "placeholder": "Tell us how we can help you...",
          "required": true,
          "rows": 6
        }
      ],
      "submitText": "Send Message"
    },
    "faq": {
      "title": "Frequently Asked Questions",
      "description": "Common questions about NooblyJS Core",
      "items": [
        {
          "question": "What is NooblyJS Core?",
          "answer": "NooblyJS Core is an enterprise-grade Node.js backend framework providing 13+ integrated modular services with automatic dependency injection, singleton pattern implementation, and pluggable providers for every architectural layer."
        },
        {
          "question": "How many services does NooblyJS Core provide?",
          "answer": "NooblyJS Core provides 13 core services: Logging, Caching, Filing, Queueing, Data Service, Working, Measuring, Scheduling, Searching, Workflow, Notifying, Authentication, and AI services. Each service supports multiple provider implementations."
        },
        {
          "question": "Is NooblyJS Core free to use?",
          "answer": "Yes, NooblyJS Core is open-source and free to use for both personal and commercial projects. Check our license for more details."
        },
        {
          "question": "How do I get started?",
          "answer": "Check out our <a href=\"documentation.html\" style=\"color: hsl(var(--primary)); text-decoration: none;\">documentation</a> for installation, quick start guide, service examples, and best practices."
        },
        {
          "question": "Can I use only specific services?",
          "answer": "Absolutely! NooblyJS Core is fully modular. You can initialize only the services you need. The dependency injection system handles all inter-service dependencies automatically."
        },
        {
          "question": "What providers are available?",
          "answer": "Each service supports multiple providers: Caching (Redis, Memcached, in-memory), Data Storage (MongoDB, SimpleDB, file-based), Filing (S3, FTP, GCP), and more. Mix and match based on your infrastructure."
        }
      ]
    },
    "footer": {
      "contactInfo": {
        "title": "Contact Information",
        "description": "Get in touch with our team for support, questions, or business inquiries.",
        "details": {
          "email": "support@nooblyjs.com",
          "business": "business@nooblyjs.com",
          "responseTime": "Within 24 hours"
        }
      },
      "quickLinks": [
        { "text": "Home", "href": "index.html" },
        { "text": "Documentation", "href": "documentation.html" },
        { "text": "Contact", "href": "contact.html" },
        { "text": "Services", "href": "/services" }
      ],
      "community": [
        { "text": "GitHub", "href": "#" },
        { "text": "Discord", "href": "#" },
        { "text": "Twitter", "href": "#" },
        { "text": "Blog", "href": "#" }
      ]
    }
  },
  "common": {
    "navigation": {
      "logo": {
        "icon": "NJS",
        "text": "NooblyJS Core"
      },
      "links": [
        { "text": "Home", "href": "index.html" },
        { "text": "Documentation", "href": "documentation.html" },
        { "text": "Contact", "href": "contact.html" },
        { "text": "Services", "href": "/services" }
      ]
    },
    "mobileMenu": {
      "links": [
        { "text": "Home", "href": "index.html" },
        { "text": "Documentation", "href": "documentation.html" },
        { "text": "Contact", "href": "contact.html" }
      ]
    },
    "footer": {
      "logo": {
        "icon": "NJS",
        "text": "NooblyJS Core"
      },
      "copyright": "¬© 2024 NooblyJS Core. All rights reserved.",
      "legalLinks": [
        { "text": "Privacy Policy", "href": "#" },
        { "text": "Terms of Service", "href": "#" },
        { "text": "License", "href": "#" }
      ]
    }
  }
}